// -----------------------------------
// Blub Remote Controller
// -----------------------------------

// The Particle Core will be the interface with the local
//  network and Internet. Trhough 4 Digital Ports (OUTPUT)
//  the Blub Remote Controller will send the Informational
//  Status for Weather and Traffic codified.

// W port will represent the Weather Activation bit:
//      0: Weather status check disabled
//      1: Weather status ready to be checked by the 
//            central controller in Blub (Arduino)
// T port will represent the Traffic Activation bit:
//      0: Traffic status check disabled
//      1: Traffic status ready to be checked by the 
//          central controller in Blub (Arduino)

// When any of the W/T bits are enabled, W1 and W2 bits will 
//  indicate the specific status to be sent to the central
//  controller:

//      Weather Status (W=1):
//      ._________________._______________.    
//      |___W1___|___W2___|____STATUS_____|
//      |    0   |    0   |-> "perfect"   |
//      |    0   |    1   |-> "sweat"     |
//      |    1   |    0   |-> "umbrella"  |
//      |    1   |    1   |-> "cold"      |
//      |--------|--------|---------------|

//      Weather Status (T=1):
//      ._________________._______________.    
//      |___W1___|___W2___|____STATUS_____|
//      |    0   |    0   |-> "good"      |
//      |    0   |    1   |-> "delays"    |
//      |    1   |    0   |-> "patient"   |
//      |    1   |    1   |-> "nightmare" |
//      |--------|--------|---------------|


// First, let's create our "shorthand" for the pins
// Same as in the Blink an LED example:
// led1 is D0, led2 is D7

int W = D1;
int T = D2;
int W1 = D3;
int W2 = D4;



void setup()
{

   // Here's the pin configuration, same as last time
   pinMode(W1, OUTPUT);
   pinMode(W2, OUTPUT);
   pinMode(W, OUTPUT);
   pinMode(T, OUTPUT);

   // We are also going to declare a Spark.function so that we can send 
   //   the different codified signals from any external device (Alexa,
   //   smartphone,etc. In the prototype we will send manually created
   //   signal to represent the different states
   
   Spark.function("signal",sendSignal);
   // This is saying that when we ask the cloud for the function "signal", 
   //   it will employ the function sendSignal() defined below.

   // For starters, let's make sure all signals are off when we start:
   digitalWrite(W1, LOW);
   digitalWrite(W2, LOW);
   digitalWrite(W, LOW);
   digitalWrite(T, LOW);

}


// Since we're waiting for input through the cloud this time,
// we don't actually need to put anything in the loop

void loop()
{
   // Nothing to do here
}


// These is the function now that gets called when a matching 
//  API request is sent from the cloud
//  This is the sendSignal function we registered to the 
//  "signal" Spark.function earlier.

int sendSignal(String command) {
    /* Spark.functions always take a string as an argument and return 
    an integer.
    Since we can pass a string, it means that we can give the program 
    commands on how the function should be used.
    These are the available commands:
    __________________________________
    |       COMMANDS        | RETURN |
    |-----For Traffic:------|_VALUES_| 
    |       - good          |   5    |
    |       - delays        |   6    |
    |       - patient       |   7    |
    |       - nightmare     |   8    |
    |---- For Weather:------|--------|
    |       - perfect       |   1    |
    |       - sweat         |   2    |
    |       - umbrella      |   3    |
    |       - cold          |   4    |
    ------------------------|--------|
            
    Then, the function returns a value to us to let us know what happened
    In this case, the return values can be show in the table above
    The value -1 will be returned if we received a totally bogus 
    command that didn't do anything.
    */

    if (command=="perfect") {
        
        // Disable Traffic
        digitalWrite(T,LOW);
        
        // Set bits for perfect weather status
        digitalWrite(W1,LOW);
        digitalWrite(W2,LOW);
        
        // Trigger weather information transfer (500ms pulse)
        digitalWrite(W,HIGH);
        delay(500);
        digitalWrite(W,LOW);
        
        
        return 1;
    }
    else if (command=="sweat") {
        
        // Disable Traffic
        digitalWrite(T,LOW);
        
        // Set bits for sweat weather status
        digitalWrite(W1,LOW);
        digitalWrite(W2,HIGH);
        
        // Trigger weather information transfer (500ms pulse)
        digitalWrite(W,HIGH);
        delay(500);
        digitalWrite(W,LOW);
        
        return 2;
    }
    else if (command=="umbrella") {
        
        // Disable Traffic
        digitalWrite(T,LOW);
        
        // Set bits for umbrella weather status
        digitalWrite(W1,HIGH);
        digitalWrite(W2,LOW);
        
        // Trigger weather information transfer (500ms pulse)
        digitalWrite(W,HIGH);
        delay(500);
        digitalWrite(W,LOW);
        
        return 3;
    }
    else if (command=="cold"){
        
        // Disable Traffic
        digitalWrite(T,LOW);
        
        // Set bits for cold weather status
        digitalWrite(W1,HIGH);
        digitalWrite(W2,HIGH);
        
        // Trigger weather information transfer (500ms pulse)
        digitalWrite(W,HIGH);
        delay(500);
        digitalWrite(W,LOW);
        

        return 4;
    }
    else if (command=="good"){
        
        // Disable Weather
        digitalWrite(W,LOW);
        
        // Set bits for good traffic status
        digitalWrite(W1,LOW);
        digitalWrite(W2,LOW);
        
        // Trigger traffic information transfer (500ms pulse)
        digitalWrite(T,HIGH);
        delay(500);
        digitalWrite(T,LOW);
        
        
        return 5;
    }
    else if (command=="delays"){
        
        // Disable Weather
        digitalWrite(W,LOW);
        
        // Set bits for delays traffic status
        digitalWrite(W1,LOW);
        digitalWrite(W2,HIGH);
        
        // Trigger traffic information transfer (500ms pulse)
        digitalWrite(T,HIGH);
        delay(500);
        digitalWrite(T,LOW);

        return 6;
    }
    else if (command=="patient"){
        
        // Disable Weather
        digitalWrite(W,LOW);
        
        // Set bits for patient traffic status
        digitalWrite(W1,HIGH);
        digitalWrite(W2,LOW);
        
        // Trigger traffic information transfer (500ms pulse)
        digitalWrite(T,HIGH);
        delay(500);
        digitalWrite(T,LOW);


        return 7;
    }
        else if (command=="nightmare"){
        
        // Disable Weather
        digitalWrite(W,LOW);
        
        // Set bits for nightmare traffic status
        digitalWrite(W1,HIGH);
        digitalWrite(W2,HIGH);
        
        // Trigger traffic information transfer (500ms pulse)
        digitalWrite(T,HIGH);
        delay(500);
        digitalWrite(T,LOW);


        return 8;
    }
        else if (command=="reset"){
        
        // Reset all the bits to 0
        digitalWrite(W,LOW);
        digitalWrite(W1,LOW);
        digitalWrite(W2,LOW);
        digitalWrite(T,LOW);

        return 100;
    }
    else {
        return -1;
    }
}
